#!/usr/bin/env python

#
# Copyright 2022 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from Cython.Build import cythonize
from distutils.core import setup, Extension, Distribution

import shutil
from os.path import join as pjoin

#from setuptools import setup, Extension, Distribution

from Cython.Distutils import build_ext as _build_ext

import os
import numpy as np
import pyarrow as pa

# conda-forge packages hdk and pyhdk should be built separately.
# HDK_ROOT_PATH is defined by the hdk activate script that
# determines the location of HDK shared libraries required for
# pyhdk.
extra_library_dirs = []
if "HDK_ROOT_PATH" in os.environ:
    extra_library_dirs.append(os.path.join(os.environ["HDK_ROOT_PATH"], "lib64"))

include_dirs = [
    np.get_include(),
    pa.get_include(),
    "@CMAKE_CURRENT_SOURCE_DIR@",
    "@CMAKE_SOURCE_DIR@",
    "@CMAKE_SOURCE_DIR@/omniscidb",
    "@CMAKE_SOURCE_DIR@/omniscidb/ThirdParty",
    "@CMAKE_SOURCE_DIR@/omniscidb/ThirdParty/rapidjson",
    "@LLVM_INCLUDE_DIRS@",
]

common = Extension(
    "pyhdk._common",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_common.pyx"],
    language="c++",
    include_dirs=include_dirs,
    library_dirs=pa.get_library_dirs() + ["@CMAKE_CURRENT_BINARY_DIR@", "."] + extra_library_dirs,
    runtime_library_dirs=pa.get_library_dirs() + extra_library_dirs,
    libraries=pa.get_libraries() + ["QueryEngine", "ConfigBuilder", "Logger", "Shared"],
    extra_compile_args=["-std=c++17", "-D__STDC_FORMAT_MACROS"],
)

execute = Extension(
    "pyhdk._execute",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_execute.pyx"],
    language="c++",
    include_dirs=include_dirs,
    library_dirs=pa.get_library_dirs() + ["@CMAKE_CURRENT_BINARY_DIR@", "."] + extra_library_dirs,
    runtime_library_dirs=pa.get_library_dirs() + extra_library_dirs,
    libraries=pa.get_libraries() + ["QueryEngine"],
    extra_compile_args=["-std=c++17", "-D__STDC_FORMAT_MACROS"],
)

sql = Extension(
    "pyhdk._sql",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_sql.pyx"],
    language="c++",
    include_dirs=include_dirs,
    library_dirs=["@CMAKE_CURRENT_BINARY_DIR@", "."] + extra_library_dirs,
    libraries=["Calcite", "QueryEngine"],
    extra_compile_args=["-std=c++17", "-D__STDC_FORMAT_MACROS"],
)

storage = Extension(
    "pyhdk._storage",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_storage.pyx"],
    language="c++",
    include_dirs=include_dirs,
    library_dirs=pa.get_library_dirs() + ["@CMAKE_CURRENT_BINARY_DIR@", "."] + extra_library_dirs,
    runtime_library_dirs=pa.get_library_dirs() + extra_library_dirs,
    libraries=pa.get_libraries() + ["ArrowStorage", "SchemaMgr", "DataMgr"],
    extra_compile_args=["-std=c++17", "-D__STDC_FORMAT_MACROS"],
)

class BinaryDistribution(Distribution):
    def has_ext_modules(foo):
        return True


class build_ext(_build_ext):
    _found_names = ()


    def _get_build_dir(self):
        # Get the package directory from build_py
        build_py = self.get_finalized_command('build_py')
        return build_py.get_package_dir('pyhdk')

    def build_extensions(self):
       # numpy_incl = pkg_resources.resource_filename('numpy', 'core/include')
        print("Calling build_extensions func")
        self.extensions = [common, execute, sql, storage]
        self.cython_directives = {
            "c_string_type": "str",
            "c_string_encoding": "utf8",
            "language_level": "3",
        }
        self.cython_include_dirs=["@CMAKE_CURRENT_SOURCE_DIR@"]

        _build_ext.build_extensions(self)

    def run(self):
        #pyarrow_cpp_home = pjoin(os.getcwd(), 'build', 'dist')
        #self._run_cmake_pyarrow_cpp(pyarrow_cpp_home)
        #self._run_cmake(pyarrow_cpp_home)
        build_dir="@CMAKE_BINARY_DIR@"
        print("Build dir: ", build_dir)
        bin_dir = pjoin(build_dir, 'bin')
        omniscidb_dir = pjoin(build_dir, 'omniscidb')
        #dist_home = pjoin("@CMAKE_CURRENT_BINARY_DIR@", 'build')
        #print("Python build dir:", dist_home)
        #build_dir = self._get_build_dir()
        #print("Pyhdk build dir:", build_dir)
        build_cmd = self.get_finalized_command('build')
        print("Pyhdk build cmd:", build_cmd.build_lib)
        real_build_dir = pjoin("@CMAKE_CURRENT_BINARY_DIR@", build_cmd.build_lib, "pyhdk")
        print("Real build path:", real_build_dir)
        shutil.copytree(bin_dir, pjoin(real_build_dir, "bin"), dirs_exist_ok=True)
        #shutil.copy(omniscidb_dir, pjoin(real_build_dir, "lib"))
        print("Calling run func")
        _build_ext.run(self)


setup(
    name="pyhdk",
    version="0.1",
    packages=["pyhdk"],
    distclass=BinaryDistribution,
    ext_modules=[Extension('__dummy__', sources=[])],
    cmdclass={
        'build_ext': build_ext
    },
    package_dir={"pyhdk": "@CMAKE_CURRENT_SOURCE_DIR@/pyhdk"},
    #package_dir={"pyhdk": "/localdisk/izamyati/tmp/pypi_install"},
    #package_data={"pyhdk": ["/localdisk/izamyati/tmp/pypi_install/lib/*.so", "/localdisk/izamyati/tmp/pypi_install/bin/*", "/localdisk/izamyati/tmp/pypi_install/QueryEngine/*"]},
    #ext_modules=cythonize(
    #    [common, execute, sql, storage],
    #    compiler_directives={
    #        "c_string_type": "str",
    #        "c_string_encoding": "utf8",
    #        "language_level": "3",
    #    },
    #    include_path=["@CMAKE_CURRENT_SOURCE_DIR@"],
    #),
    #options={'bdist_wheel':{'universal':True}},
)
